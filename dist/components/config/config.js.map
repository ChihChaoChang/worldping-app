{"version":3,"sources":["../../../src/components/config/config.js"],"names":[],"mappings":"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","file":"config.js","sourcesContent":["import configTemplate from './config.html!text';\n\nclass WorldPingConfigCtrl {\n  constructor($scope, $injector, backendSrv) {\n    this.backendSrv = backendSrv;\n    var self = this;\n    this.appEditCtrl.setPreUpdateHook(this.preUpdate())\n\n    if (this.appModel.jsonData === null) {\n      this.appModel.jsonData = {};\n    }\n  }\n\n  preUpdate() {\n    var self = this;\n    return function() {\n      var promises = [];\n      //if the apiKey is being set, check and make sure that we have initialized our datasource and dashboards.\n      if (self.appModel.secureJsonData && self.appModel.secureJsonData.apiKey) {\n        self.appModel.jsonData.apiKeySet = true;\n        if (!self.appModel.jsonData.datasourceSet) {\n          promises.push(self.initDatasource().then(function() {\n            self.appModel.jsonData.datasourceSet = true;\n          }));\n        }\n      }\n      return Promise.all(promises)\n    }\n  }\n  \n  configureDatasource() {\n    var self = this;\n    this.ctrl.appModel.jsonData.datasourceSet = false;\n    this.initDatasource().then(function() {\n      self.ctrl.appModel.jsonData.datasourceSet = true;\n      console.log(\"datasource initialized\");\n    });\n  }\n\n  initDatasource() {\n    var self = this;\n    //check for existing datasource.\n    return self.backendSrv.get('/api/datasources').then(function(results) {\n      var foundGraphite = false;\n      var foundElastic = false\n      _.forEach(results, function(ds) {\n        if (foundGraphite && foundElastic) { return; }\n        if (ds.name === \"raintank\") {\n          foundGraphite = true;\n        }\n        if (ds.name === \"raintankEvents\") {\n          foundElastic = true;\n        }\n      });\n      var promises = [];\n      if (!foundGraphite) {\n        // create datasource.\n        var graphite = {\n          name: 'raintank',\n          type: 'graphite',\n          url: 'api/plugin-proxy/worldping-app/api/graphite',\n          access: 'direct',\n          jsonData: {}\n        };\n        promises.push(self.backendSrv.post('/api/datasources', graphite));\n      }\n      if (!foundElastic) {\n        // create datasource.\n        var elastic = {\n          name: 'raintankEvents',\n          type: 'elasticsearch',\n          url: 'api/plugin-proxy/worldping-app/api/elasticsearch',\n          access: 'direct',\n          database: '[events-]YYYY-MM-DD',\n          jsonData: {\n            esVersion: 2,\n            interval: \"Daily\",\n            timeField: \"timestamp\"\n          }\n        };\n        promises.push(self.backendSrv.post('/api/datasources', elastic));\n      }\n      return Promise.all(promises);\n    });\n  }\n}\n\nWorldPingConfigCtrl.template = configTemplate;\n\nexport {\n  WorldPingConfigCtrl as ConfigCtrl\n};\n"]}